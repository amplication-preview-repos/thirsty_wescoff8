/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  House as PrismaHouse,
  Key as PrismaKey,
  RealEstateAgent as PrismaRealEstateAgent,
} from "@prisma/client";

export class HouseServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.HouseCountArgs, "select">): Promise<number> {
    return this.prisma.house.count(args);
  }

  async houses<T extends Prisma.HouseFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.HouseFindManyArgs>
  ): Promise<PrismaHouse[]> {
    return this.prisma.house.findMany<Prisma.HouseFindManyArgs>(args);
  }
  async house<T extends Prisma.HouseFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.HouseFindUniqueArgs>
  ): Promise<PrismaHouse | null> {
    return this.prisma.house.findUnique(args);
  }
  async createHouse<T extends Prisma.HouseCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.HouseCreateArgs>
  ): Promise<PrismaHouse> {
    return this.prisma.house.create<T>(args);
  }
  async updateHouse<T extends Prisma.HouseUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.HouseUpdateArgs>
  ): Promise<PrismaHouse> {
    return this.prisma.house.update<T>(args);
  }
  async deleteHouse<T extends Prisma.HouseDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.HouseDeleteArgs>
  ): Promise<PrismaHouse> {
    return this.prisma.house.delete(args);
  }

  async findKeys(
    parentId: string,
    args: Prisma.KeyFindManyArgs
  ): Promise<PrismaKey[]> {
    return this.prisma.house
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .keys(args);
  }

  async getRealEstateAgent(
    parentId: string
  ): Promise<PrismaRealEstateAgent | null> {
    return this.prisma.house
      .findUnique({
        where: { id: parentId },
      })
      .realEstateAgent();
  }
}
