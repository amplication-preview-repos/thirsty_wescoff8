/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { KeyService } from "../key.service";
import { KeyCreateInput } from "./KeyCreateInput";
import { Key } from "./Key";
import { KeyFindManyArgs } from "./KeyFindManyArgs";
import { KeyWhereUniqueInput } from "./KeyWhereUniqueInput";
import { KeyUpdateInput } from "./KeyUpdateInput";

export class KeyControllerBase {
  constructor(protected readonly service: KeyService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Key })
  async createKey(@common.Body() data: KeyCreateInput): Promise<Key> {
    return await this.service.createKey({
      data: {
        ...data,

        client: data.client
          ? {
              connect: data.client,
            }
          : undefined,

        house: data.house
          ? {
              connect: data.house,
            }
          : undefined,
      },
      select: {
        client: {
          select: {
            id: true,
          },
        },

        createdAt: true,

        house: {
          select: {
            id: true,
          },
        },

        id: true,
        isActive: true,
        issuedAt: true,
        label: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Key] })
  @ApiNestedQuery(KeyFindManyArgs)
  async keys(@common.Req() request: Request): Promise<Key[]> {
    const args = plainToClass(KeyFindManyArgs, request.query);
    return this.service.keys({
      ...args,
      select: {
        client: {
          select: {
            id: true,
          },
        },

        createdAt: true,

        house: {
          select: {
            id: true,
          },
        },

        id: true,
        isActive: true,
        issuedAt: true,
        label: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Key })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async key(@common.Param() params: KeyWhereUniqueInput): Promise<Key | null> {
    const result = await this.service.key({
      where: params,
      select: {
        client: {
          select: {
            id: true,
          },
        },

        createdAt: true,

        house: {
          select: {
            id: true,
          },
        },

        id: true,
        isActive: true,
        issuedAt: true,
        label: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Key })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateKey(
    @common.Param() params: KeyWhereUniqueInput,
    @common.Body() data: KeyUpdateInput
  ): Promise<Key | null> {
    try {
      return await this.service.updateKey({
        where: params,
        data: {
          ...data,

          client: data.client
            ? {
                connect: data.client,
              }
            : undefined,

          house: data.house
            ? {
                connect: data.house,
              }
            : undefined,
        },
        select: {
          client: {
            select: {
              id: true,
            },
          },

          createdAt: true,

          house: {
            select: {
              id: true,
            },
          },

          id: true,
          isActive: true,
          issuedAt: true,
          label: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Key })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteKey(
    @common.Param() params: KeyWhereUniqueInput
  ): Promise<Key | null> {
    try {
      return await this.service.deleteKey({
        where: params,
        select: {
          client: {
            select: {
              id: true,
            },
          },

          createdAt: true,

          house: {
            select: {
              id: true,
            },
          },

          id: true,
          isActive: true,
          issuedAt: true,
          label: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
