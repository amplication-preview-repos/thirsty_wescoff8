/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { RealEstateAgentService } from "../realEstateAgent.service";
import { RealEstateAgentCreateInput } from "./RealEstateAgentCreateInput";
import { RealEstateAgent } from "./RealEstateAgent";
import { RealEstateAgentFindManyArgs } from "./RealEstateAgentFindManyArgs";
import { RealEstateAgentWhereUniqueInput } from "./RealEstateAgentWhereUniqueInput";
import { RealEstateAgentUpdateInput } from "./RealEstateAgentUpdateInput";
import { HouseFindManyArgs } from "../../house/base/HouseFindManyArgs";
import { House } from "../../house/base/House";
import { HouseWhereUniqueInput } from "../../house/base/HouseWhereUniqueInput";

export class RealEstateAgentControllerBase {
  constructor(protected readonly service: RealEstateAgentService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: RealEstateAgent })
  async createRealEstateAgent(
    @common.Body() data: RealEstateAgentCreateInput
  ): Promise<RealEstateAgent> {
    return await this.service.createRealEstateAgent({
      data: data,
      select: {
        createdAt: true,
        email: true,
        id: true,
        name: true,
        phoneNumber: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [RealEstateAgent] })
  @ApiNestedQuery(RealEstateAgentFindManyArgs)
  async realEstateAgents(
    @common.Req() request: Request
  ): Promise<RealEstateAgent[]> {
    const args = plainToClass(RealEstateAgentFindManyArgs, request.query);
    return this.service.realEstateAgents({
      ...args,
      select: {
        createdAt: true,
        email: true,
        id: true,
        name: true,
        phoneNumber: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: RealEstateAgent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async realEstateAgent(
    @common.Param() params: RealEstateAgentWhereUniqueInput
  ): Promise<RealEstateAgent | null> {
    const result = await this.service.realEstateAgent({
      where: params,
      select: {
        createdAt: true,
        email: true,
        id: true,
        name: true,
        phoneNumber: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: RealEstateAgent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateRealEstateAgent(
    @common.Param() params: RealEstateAgentWhereUniqueInput,
    @common.Body() data: RealEstateAgentUpdateInput
  ): Promise<RealEstateAgent | null> {
    try {
      return await this.service.updateRealEstateAgent({
        where: params,
        data: data,
        select: {
          createdAt: true,
          email: true,
          id: true,
          name: true,
          phoneNumber: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: RealEstateAgent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteRealEstateAgent(
    @common.Param() params: RealEstateAgentWhereUniqueInput
  ): Promise<RealEstateAgent | null> {
    try {
      return await this.service.deleteRealEstateAgent({
        where: params,
        select: {
          createdAt: true,
          email: true,
          id: true,
          name: true,
          phoneNumber: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/houses")
  @ApiNestedQuery(HouseFindManyArgs)
  async findHouses(
    @common.Req() request: Request,
    @common.Param() params: RealEstateAgentWhereUniqueInput
  ): Promise<House[]> {
    const query = plainToClass(HouseFindManyArgs, request.query);
    const results = await this.service.findHouses(params.id, {
      ...query,
      select: {
        address: true,
        createdAt: true,
        id: true,
        listedAt: true,
        price: true,

        realEstateAgent: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/houses")
  async connectHouses(
    @common.Param() params: RealEstateAgentWhereUniqueInput,
    @common.Body() body: HouseWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      houses: {
        connect: body,
      },
    };
    await this.service.updateRealEstateAgent({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/houses")
  async updateHouses(
    @common.Param() params: RealEstateAgentWhereUniqueInput,
    @common.Body() body: HouseWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      houses: {
        set: body,
      },
    };
    await this.service.updateRealEstateAgent({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/houses")
  async disconnectHouses(
    @common.Param() params: RealEstateAgentWhereUniqueInput,
    @common.Body() body: HouseWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      houses: {
        disconnect: body,
      },
    };
    await this.service.updateRealEstateAgent({
      where: params,
      data,
      select: { id: true },
    });
  }
}
