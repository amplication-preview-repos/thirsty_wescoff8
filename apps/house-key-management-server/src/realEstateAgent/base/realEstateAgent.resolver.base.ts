/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { RealEstateAgent } from "./RealEstateAgent";
import { RealEstateAgentCountArgs } from "./RealEstateAgentCountArgs";
import { RealEstateAgentFindManyArgs } from "./RealEstateAgentFindManyArgs";
import { RealEstateAgentFindUniqueArgs } from "./RealEstateAgentFindUniqueArgs";
import { CreateRealEstateAgentArgs } from "./CreateRealEstateAgentArgs";
import { UpdateRealEstateAgentArgs } from "./UpdateRealEstateAgentArgs";
import { DeleteRealEstateAgentArgs } from "./DeleteRealEstateAgentArgs";
import { HouseFindManyArgs } from "../../house/base/HouseFindManyArgs";
import { House } from "../../house/base/House";
import { RealEstateAgentService } from "../realEstateAgent.service";
@graphql.Resolver(() => RealEstateAgent)
export class RealEstateAgentResolverBase {
  constructor(protected readonly service: RealEstateAgentService) {}

  async _realEstateAgentsMeta(
    @graphql.Args() args: RealEstateAgentCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [RealEstateAgent])
  async realEstateAgents(
    @graphql.Args() args: RealEstateAgentFindManyArgs
  ): Promise<RealEstateAgent[]> {
    return this.service.realEstateAgents(args);
  }

  @graphql.Query(() => RealEstateAgent, { nullable: true })
  async realEstateAgent(
    @graphql.Args() args: RealEstateAgentFindUniqueArgs
  ): Promise<RealEstateAgent | null> {
    const result = await this.service.realEstateAgent(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => RealEstateAgent)
  async createRealEstateAgent(
    @graphql.Args() args: CreateRealEstateAgentArgs
  ): Promise<RealEstateAgent> {
    return await this.service.createRealEstateAgent({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => RealEstateAgent)
  async updateRealEstateAgent(
    @graphql.Args() args: UpdateRealEstateAgentArgs
  ): Promise<RealEstateAgent | null> {
    try {
      return await this.service.updateRealEstateAgent({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => RealEstateAgent)
  async deleteRealEstateAgent(
    @graphql.Args() args: DeleteRealEstateAgentArgs
  ): Promise<RealEstateAgent | null> {
    try {
      return await this.service.deleteRealEstateAgent(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [House], { name: "houses" })
  async findHouses(
    @graphql.Parent() parent: RealEstateAgent,
    @graphql.Args() args: HouseFindManyArgs
  ): Promise<House[]> {
    const results = await this.service.findHouses(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
