/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  RealEstateAgent as PrismaRealEstateAgent,
  House as PrismaHouse,
} from "@prisma/client";

export class RealEstateAgentServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.RealEstateAgentCountArgs, "select">
  ): Promise<number> {
    return this.prisma.realEstateAgent.count(args);
  }

  async realEstateAgents<T extends Prisma.RealEstateAgentFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.RealEstateAgentFindManyArgs>
  ): Promise<PrismaRealEstateAgent[]> {
    return this.prisma.realEstateAgent.findMany<Prisma.RealEstateAgentFindManyArgs>(
      args
    );
  }
  async realEstateAgent<T extends Prisma.RealEstateAgentFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.RealEstateAgentFindUniqueArgs>
  ): Promise<PrismaRealEstateAgent | null> {
    return this.prisma.realEstateAgent.findUnique(args);
  }
  async createRealEstateAgent<T extends Prisma.RealEstateAgentCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.RealEstateAgentCreateArgs>
  ): Promise<PrismaRealEstateAgent> {
    return this.prisma.realEstateAgent.create<T>(args);
  }
  async updateRealEstateAgent<T extends Prisma.RealEstateAgentUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.RealEstateAgentUpdateArgs>
  ): Promise<PrismaRealEstateAgent> {
    return this.prisma.realEstateAgent.update<T>(args);
  }
  async deleteRealEstateAgent<T extends Prisma.RealEstateAgentDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.RealEstateAgentDeleteArgs>
  ): Promise<PrismaRealEstateAgent> {
    return this.prisma.realEstateAgent.delete(args);
  }

  async findHouses(
    parentId: string,
    args: Prisma.HouseFindManyArgs
  ): Promise<PrismaHouse[]> {
    return this.prisma.realEstateAgent
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .houses(args);
  }
}
